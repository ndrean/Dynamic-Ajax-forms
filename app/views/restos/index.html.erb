<div class="container w-70%">
  <div class="row">
      <h1>Editable form & Ajax pagination</h1>
    <p>We can edit directly the name of the restaurant and save (<strong>only on page load</strong>). There is a hidden form under the button <em>Save Edit</em> 
. We use the form helper <code>form_with</code> and provide the object <code>model: resto</code> (no '@' since it is in an iteration loop);
then  <code>form_with</code> determines that <code>resto</code> is <strong>not a new instance</strong> of <code>Resto</code>,
so <strong>automatically</strong> use the <em>update</em> path. When Rails renders the HTML, the form is initially populated with the object values.
We attached a listener to every editable cells (the names of the restaurants), and every change is captured with the event <em>input</em>.
Every event triggers a copy of the innerText into the input of the hidden form.
The form is then submitted to the database with <em>PATCH / UPDATE</em>, so this happens in the background.</p>
  </div>
  <%# https://github.com/heartcombo/simple_form/wiki/Creating-a-minimalist-form-(no-labels-just-placeholders) %>
  <div class="row">
      <%= simple_form_for :search, method: 'GET', remote: true do |f| %>
        <div class="input-field">
          <%= f.input_field :g, required: false, input_html: {value: ""},placeholder: "blank or any 'type'"  %>
          <%= f.input_field :r, required: false, input_html: {value: ""}, placeholder: "blank or any restaurant" %>
          <%= button_tag(type: 'submit', id: "search_for_restos", class: "btn btn-outline-success btn-lg", style:"padding: .8rem 1rem") do %>
            <i class="fas fa-search" id="i-search"></i>
          <% end %>
        </div>
        <% end %>
  </div>
 
  <div class="row">
    <div id="paginatorRestos">
        <%= paginate(@restos,remote: true) %>
    </div>
    <table class="table table-dark" id="table-restos">
      <thead>
        <tr>
          <th>Name (editable)</th>
          <th>Type</th>
          <th>Count (counter_cache)</th>
          <th>Save Edit</th>
          <th>Delete Restaurant</th> 
        </tr>
      </thead>

      <tbody id="tb-restos"> 
        <%# @restos.each do |resto| %>
          <%= render 'restos/trows', restos: @restos %>
        <%# end %>
      </tbody>
    </table>
  </div>
  
  
  <br>
  
  <hr>
  <div class="row">
  <h1>Dynamic nested form</h1>
  <p>We have a dynamic nested form below: we can create on the fly several associations. This is permitted
  since we declared <code>accepts_nested_attributes_for</code> and allowed an array of attributes in the 
  strong params.</p>
  <p>Note on validations: we have browser validation with  <code>required: true</code> where necessary with the setup  <code>config.browser_validations = true</code> used
    with <em>simple_form_for</em> in (<em>#config/initializers/simple_form.rb</em>). We also have backend error rendering versus the model with simply <code>f.error_notification</code>
    for <em>Simple_Form</em> or more generally <code>&lt%= render 'shared/errors', myvar: f.object %></code> with a partial.</p>
    <div id="new_Comment" class="border col-md-8">
    <p> The code below is the child fielset code to be injected by Javascript. We use <code>outerHTML</code> to 
    get the serialized HTML fragment of the fieldset including its descendants, and replace the index (it has to have 
    a unique 'name') by a <code>replace(/regex/, new value)</code> where the new value is given by searching the formbuilder's last index and incrementing it.</p>
    <code>
    &ltfieldset data-fields-id="0"> <br>
      &ltdiv class="form-group string optional resto_comments_comment"> <br>
      &ltlabel class="string optional" for="resto_comments_attributes_${newID}_comment">Comment&lt/label> <br>
      &ltinput class="form-control string optional" 
        type="text" name="resto[comments_attributes][${newID}][comment]"
         id="resto_comments_attributes_${newID}_comment"> <br>
      &lt/div> <br>
    &lt/fieldset>
    </code>
    <pre>
function dynAddComment() {
  const createCommentButton = document.getElementById("addComment");
  createCommentButton.addEventListener("click", (e) => {
    e.preventDefault();
    const arrayComments = [...document.querySelectorAll("fieldset")];
    const lastId = arrayComments[arrayComments.length - 1];
    const newId = parseInt(lastId.dataset.fieldsId, 10) + 1;
    const changeFieldsetId = document
        .querySelector('[data-fields-id]')
        .outerHTML
        .replace('0',"${newId}")
    document.querySelector("#new_resto").insertAdjacentHTML(
      "beforeend",
      `
      ${changeFieldsetId}
       `
    );
  });
}
    </pre>
      
      <p class="d-flex flex-row">
      </p>
    </div>
    <div  class="border col-md-4">
    <div class="card">
      <div class="card-header text-center">
        <%= link_to 'Create restaurant and dynamically comments by clients on the fly', 'restos/new', remote: true, id:"link_form_resto", class:"btn btn-success", style:" color:white;" %>
      </div>
      <div class="card-body" id="form_Resto"></div>
    </div>
    </div>
  </div>
</div>


