

<div class="container w-70%">
  <div class="row">
   
      <h1>Editable form & Dynamic forms</h1>
    
    
    <p>We can edit directly the name of the restaurant and save. There is a hidden form under the button <em>Save Edit</em> 
. We use the form helper <code>form_with</code> and provide the object <code>model: resto</code> (no '@' since it is in an iteration loop);
then  <code>form_with</code> determines that <code>resto</code> is <strong>not a new instance</strong> of <code>Resto</code>,
so <strong>automatically</strong> use the <em>update</em> path. When Rails renders the HTML, the form is initially populated with the object values.
We attached a listener to every editable cells (the names of the restaurants), and every change is captured with the event <em>input</em>.
Every event triggers a copy of the innerText into the input of the hidden form.
The form is then submitted to the database with <em>PATCH / UPDATE</em>, so this happens in the background.</p>
  </div>
 
  <div class="row">
    <div id="paginatorRestos">
        <%= paginate(@restos, remote: true) %>
    </div>
    <table class="table table-dark" id="table-restos">
      <thead>
        <tr>
          <th>Name (editable)</th>
          <th>Type</th>
          <th>Count (counter_cache)</th>
          <th>Save Edit</th>
          <th>Delete Restaurant</th> 
        </tr>
      </thead>

      <tbody id="tb-restos"> 
        <%# @restos.each do |resto| %>
          <%= render 'restos/trows', restos: @restos %>
        <%# end %>
      </tbody>
    </table>
  </div>
  
  
  <br>
  
  <hr>
  <div class="row">
  <h3>New Restaurant & dynamic form</h3>
  <p>We have a dynamic nested form below: we can create on the fly several associations. This is permitted
  since we declared <code>accepts_nested_attributes_for</code> and allowed an array of attributes in the 
  strong params.</p>
  <p>We have browser validation <code>required: true</code> with the setup  <code>config.browser_validations = true</code> used
    with <em>simple_form_for</em> in (<em>#config/initializers/simple_form.rb</em>) and backend error rendering versus the model with <code>&lt%= render 'shared/errors', myvar: f.object %></code></p>
    <div id="new_Comment" class="border col-md-6">

    <code>
    &ltfieldset data-fields-id="0">
      &ltdiv class="form-group string optional resto_comments_comment">
      &ltlabel class="string optional" for="resto_comments_attributes_${newID}_comment">Comment&lt/label>
      &ltinput class="form-control string optional" 
        type="text" name="resto[comments_attributes][${newID}][comment]"
         id="resto_comments_attributes_${newID}_comment">&lt/div>
    &lt/fieldset>
    </code>
      <p> The code above is injected by Javascript. The unique ID is incremental.</p>
      <p class="d-flex flex-row">
        <%= link_to 'Create new restaurant. Add comments on the fly', 'restos/new', remote: true, id:"link_form_resto", class:"btn btn-success", style:" color:white;" %>
      </p>
    </div>
    <div id="form_Resto" class="border col-md-6">
    </div>
  </div>
</div>


