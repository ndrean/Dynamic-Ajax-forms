
<div class="container">
<h1>Exemple triple nested form</h1>

<p>In this toy example, we have a <em>one-to-many</em> association with three models: <em>Genre</em>, <em>Resto</em> and
 <em>Comment</em> with respectively <code>has_many :comments</code> and <code>belongs_to :resto</code>.</p>
 <p>We use the method <code>accepts_nested_atributes_for </code> in the models and <code>fields_for</code>
to create the association array.</p>



    <h5>Exemple of triple nested simple form</h5>
    <div class="row justify-content-start" style="height:auto;">
        <div class="col-md-6 border pl-2 pr-2">        
            <%= simple_form_for @genre, url: nests_path, method: :post do |f| %>
                <%#= f.error_notification%>
                <%= render 'shared/errors', myvar: f.object %>
                <%= f.input :name, label:"Type of restaurant" %>
                <%= f.simple_fields_for :restos do |ff| %>
                    <%= ff.input :name, label:"Restaurant's name" %>
                    <%= ff.simple_fields_for :comments do |fff| %>
                        <%= fff.input :comment, label:"Add a comment" %>
                    <% end %>
                <% end %>
                <%= f.button :submit, "Triple nested", class:"btn btn-primary" %>
            <% end %>
        </div>
        <div class="col-md-6">
            <p><code>def new <br> @genre = Genre.new <br> @genre.restos.build.comments.build <br> end</code></p>
            <p><code>def nest_params<br>
                params.require(:genre).permit(:name,
                restos_attributes: [:name,
                comments_attributes:[:comment]])<br>
                end
            </code></p>
        </div>
    </div>
    
</div>





