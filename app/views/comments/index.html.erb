
<div class="container">
  <div class="row">
  <h1>PG_search through association</h1>
  <p>The comments are editable and can be saved on the fly (Ajax). The Kaminari rendering of the table is also AJAX.
  We can create a comment with the associated restaurant. If we want to add a restaurant which is not on the list while 
  on this page, there is a form to create one on the fly.</p>
  <p>Below is a basic search; you can query for Comments against a type, against a restaurant, and
  against a word. If no results, a void table is displayed. Clic on search to refresh with the full results.</p>
  </div>

  <div class="row">
      <%= simple_form_for :search, method: 'GET', remote: true do |f| %>
        <div class="input-field">
          <%= f.input_field :g, required: false, input_html: {value: ""},placeholder: "Search by 'type'"  %>
          <%= f.input_field :r, required: false, input_html: {value: ""},placeholder: "Search by restaurant" %>
          <%= f.input_field :pg, required: false, input_html: {value: ""},placeholder: "Any word" %>
          <%= button_tag(type: 'submit', class: "btn btn-outline-success btn-lg", style:"padding: .8rem 1rem") do %>
            <i class="fas fa-search" id="i-search"></i>
          <% end %>
        </div>
        <% end %>
        <%# note: input_html: {value: ""} to give a blank value on page refresh %>
  </div>
  <div class="row">
    <div id="paginatorComments">
        <%= paginate(@comments, remote: true)  %>
    </div>
    <table class="table table-dark">
      <thead>
        <tr>
          <th>Restaurant</th>
          <th>Comment (editable)</th>
          <th>Save Edit</th>
          <th> Delete Comment</th>
        </tr>
      </thead>
      <tbody id="tb-comments"> 
       <%= render 'comments/table_comments', comments: @comments %>
      </tbody>
    </table>
    
    
    <br>

  </div>
  <h1>Select or Create on the fly</h1>
  <div class="row">
  
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <%= link_to 'New Comment on restaurant by client', 'comments/new', remote: true, class:"btn btn-success", style:" color:white;" %>
        </div>
        <div class="card-body">
          <div id="new_comments"></div>
        </div>
      </div>
    </div>
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <%= link_to 'Add new Restaurant and genre on the fly?', 'comments/new_resto_on_the_fly', remote: true, class:"btn btn-success", style:" color:white;" %>
        </div>
        <div class="card-body">
          <div id="new_resto_on_the_fly"></div>
        </div>
      </div> 
    </div>
    <div class="row">
    <p>To create a new genre or select one for a new restaurant we can create an instance
    variable <code>attr_accessor :new_genre_name</code> in the model <em>Resto</em> and permits ':new_genre_name'
    in the controller. Then we have 2 possible methods:</p>
     <ul>
       <li>just declare <code>@resto = Resto.new(resto_params)</code> in controller and 
       set in the model a <code>before_action :create_genre_from_resto</code>' 
       (the 'belongs_to' method makes the following 'create_genre' method available (<a herf="https://guides.rubyonrails.org/association_basics.html#methods-added-by-belongs-to-create-association-attributes"> Rails guide</a> )) 
       with the code:
       <pre>
def create_genre_from_resto 
  create_genre(name: new_genre_name ) unless new_genre_name.blank?
end
       </pre>
       </li>
       <li> or declare everything in th controller (where the hash params is available): <br>
       <pre>
if params[:resto][:new_genre_name].blank?
  @genre = Genre.find(params[:resto][:genre_id])
else
  @genre = Genre.create(name: params[:resto][:new_genre_name])
end
@resto = Resto.new(resto_params)
@resto.genre = @genre 
       </pre> 
       </li>
     </ul>
    </div>
  </div>
</div>
