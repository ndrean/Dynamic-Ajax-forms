<div class="container">
    <div class="row justify-content-start" style="height:auto;">
        <h3>Example dynamic nested form with joint table: create a new 'genre', and a restaurant, with comments by clients, as much as you want</h3>
        <h5>Another example of dynamical nested form in <%= link_to 'Restos', restos_path %> where the genre is given within a select list.</h5>
        <br><hr>
        <div class="col-md-5 pl-2 pr-2">    
            <div class="card">
                <div class="card-header">
                    <%= link_to 'New nested dynamic form', genres_new4_path, remote: true, class: "btn btn-success", style:"color: white;" %>
                </div>
                <div class="card-body" id="nested-4">
                    
                </div>
                
            </div>
        </div>
        <div class="col-md-7">
                <figure>
                    <%= image_tag 'db-schema.jpeg'  %>
                </figure>
        </div>   
    </div>
    <div class="row"> 
        <div class="col-md-6">
            <pre>
    #genres_controller.rb
    def new
    &nbsp @genre = Genre.new
    &nbsp @genre.restos.build.comments.build.build_client
    end

    def create
        @genre.create(nest_params)
    end

    def nest_params
    &nbsp params.require(:genre).permit(:name,
    &nbsp&nbsp restos_attributes: [:name, 
    &nbsp&nbsp &nbsp comments_attributes:[:comment,
    &nbsp&nbsp &nbsp &nbsp client_attributes:[:name]]])
    end</pre>
        </div>
        <div class="col-md-6">
            <pre>
    &lt%= simple_form_for @genre, url: 'create4' do |f| %>
        &lt%= f.error_notification%>
        <%#= render 'shared/errors', myvar: f.object %>
        &lt%= f.input :name, label:"Type of restaurant" %>
        &lt%= f.simple_fields_for :restos do |r| %>
            &lt%= r.input :name, label:"Restaurant's name" %>
            &lt%= r.simple_fields_for :comments do |c| %>
            &ltfieldset data-fields-id="&lt%= c.index %>">
                &lt%= c.input :comment, label:"Add a comment" %>
                &lt%= c.simple_fields_for :client do |cl| %>
                    &lt%= cl.input :name, label: "Join client's name"%>
                &lt% end %>
            &lt/fieldset>
            &lt% end %>
        &lt% end %>
        &lt%= f.button :submit, "Nested", class:"btn btn-primary" %>
    &lt% end %>
            </pre>
        </div>
    </div>
    <div class="row">
        <div class="col">
        <p>We extract from the console the code generate by the form for 'comments' and 'client'. We created a 'fieldset'
        to access to it and copy it easily. We then can inject it by Javascript in the form when clicked on "add comment".
        We incremente all the ids after searching for the last form index.
        </p>
        <pre>
function dynAddNestedComment() {
  document.getElementById("addNestedComment").addEventListener("click", (e) => {
    e.preventDefault();

    const arrayComments = [...document.querySelectorAll("fieldset")];
    const lastId = arrayComments[arrayComments.length - 1];
    const newId = parseInt(lastId.dataset.fieldsId, 10) + 1;
    // we have put a dataset in the fieldset tag where data-fieldsid = c.index
    //  where Rails gives the index of the formbuilder object


    // set new ID at special location in the new injected HTML fragment
    let dynField = document.querySelector('[data-fields-id="0"]').outerHTML.toString()
    let nb= 0 // counter
    dynField = dynField.replace(/0/g, // global flag 'g' to get ALL
     (matched, offset) => {
       // we are going to replace every odd index of '0' to 'newId' (see original fieldset)
        nb += 1
        if (offset = 0) {
          return matched
        }
        if (nb%2 === 1) { // every odd to change 'xxx-0-xxx-0' to 'xxx-0-xxx-1'
          return newId;
        } else {
          return matched;
        }
      }
    )

    // we inject into the DOM
    document.querySelector("#nested-4").insertAdjacentHTML(
      "beforeend", dynField
    );
  });
}     
        </pre>
        </div>
    </div>
</div>
